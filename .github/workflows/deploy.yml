name: CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: yarn install

      - name: Run Tests
        run: yarn run test

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'

          cd ~/whisprr_backend

          sed -i '/^DB_HOST[ =]/d' .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env

          sed -i '/^DB_PORT[ =]/d' .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

          sed -i '/^DB_USER[ =]/d' .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env

          sed -i '/^DB_USERNAME[ =]/d' .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env

          sed -i '/^DB_PASSWORD[ =]/d' .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

          sed -i '/^DB_NAME[ =]/d' .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env

          sed -i '/^DB_ROOT_PASSWORD[ =]/d' .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env

          sed -i '/^JWT_SECRET_KEY[ =]/d' .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env

          sed -i '/^DB_SYNC[ =]/d' .env
          echo "DB_SYNC=${{ secrets.DB_SYNC }}" >> .env

          sed -i '/^OPENAI_API_KEY[ =]/d' .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env

          sed -i '/^PORT[ =]/d' .env
          echo "PORT=${{ secrets.PORT }}" >> .env

          sed -i '/^TIMELIMIT[ =]/d' .env
          echo "TIMELIMIT=${{ secrets.TIMELIMIT }}" >> .env

          sed -i '/^PACKAGE_NAME[ =]/d' .env
          echo "PACKAGE_NAME=${{ secrets.PACKAGE_NAME }}" >> .env


          echo "${{ secrets.GCP_CREDENTIALS }}" > ~/whisprr_backend/gcp-credentials.json
            

          chmod 600 ~/whisprr_backend/gcp-credentials.json


          git fetch origin dev
          git reset --hard origin/dev
          docker-compose down
          COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose up -d --build

          EOF
